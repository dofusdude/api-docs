openapi: 3.0.0
x-stoplight:
  id: ezdjxlif28ceb
info:
  title: dofusdude
  version: 1.0.0-rc.2
  description: "# Open Ankama Developer Community\nThe all-in-one toolbelt for your next Ankama related project.\n\n## Versions\n- [Dofus 2](https://docs.dofusdu.de/dofus2/)\n- [Dofus 3](https://docs.dofusdu.de/dofus3/)\n  - v1 [latest] (you are here) \n\n## Client SDKs\n- [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js --save`\n- [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts --save`\n- [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo`\n- [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude`\n- [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup\n\nEverything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.\n\nYour favorite language is missing? Please let me know!\n\n# Main Features\n- \U0001F977 **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.\n\n- ⚡ **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in \U0001F1E9\U0001F1EA.\n\n- \U0001F4E8 **Almanax Discord Integration** Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.\n\n- \U0001FA78 **Dofus 3 Beta** from stable to bleeding edge by replacing /dofus3 with /dofus3beta.\n\n- \U0001F5E3️ **Multilingual** supporting _en_, _fr_, _es_, _pt_, _de_.\n\n- \U0001F9E0 **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.\n\n- \U0001F575️ **Official Sources** generated from actual data from the game.\n\n... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h).\n"
  contact:
    name: Survival
    url: "https://discord.gg/3EtHskZD8h"
    email: stelzo@steado.de
  license:
    name: GPL-3.0
    url: "https://github.com/dofusdude/doduapi/blob/main/LICENSE"
servers:
  - url: "https://api.dofusdu.de"
    description: API
paths:
  "/{game}/v1/{language}/items/search":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
          example: fr
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: Search All Items
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ListItemGeneral"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          headers: {}
      operationId: get-items-all-search
      description: Search in all names and descriptions of Dofus items (including all subtypes) with a query.
      parameters:
        - schema:
            type: string
            example: atcham
          in: query
          name: query
          description: case sensitive search query
          required: true
        - schema:
            type: integer
            format: int32
            example: 190
            maximum: 200
            minimum: 0
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            example: 200
            maximum: 200
            format: int32
            minimum: 0
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: integer
            default: 8
            minimum: 1
            maximum: 100
            example: 8
          in: query
          name: limit
          description: maximum number of returned results
        - schema:
            type: array
            items:
              type: string
            example:
              - boots
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      tags:
        - game
      x-stoplight:
        id: eeoi1h7wagrmw
  "/{game}/v1/{language}/mounts/search":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
          example: fr
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: Search Mounts
      tags:
        - mounts
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Mount"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-mounts-search
      description: Search in all names and descriptions of mounts with a query.
      parameters:
        - schema:
            type: string
            example: Dorée
          in: query
          name: query
          description: case sensitive search query
          required: true
        - schema:
            type: string
            example: Dragodinde
          in: query
          name: "filter[family_name]"
          description: only results with the translated family name
        - schema:
            type: integer
            default: 8
            example: 8
            minimum: 1
            maximum: 100
          in: query
          name: limit
          description: maximum number of returned results
      x-stoplight:
        id: 55fkjddmfhh7n
  "/{game}/v1/{language}/sets/search":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          example: dofus3
          enum:
            - dofus3
            - dofus3beta
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: Search Sets
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ListEquipmentSet"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-sets-search
      description: Search in all names and descriptions of sets with a query.
      parameters:
        - schema:
            type: string
            example: Des
          in: query
          name: query
          description: case sensitive search query
          required: true
        - schema:
            type: integer
            minimum: 1
            maximum: 200
            format: int32
            example: 195
          in: query
          name: "filter[min_highest_equipment_level]"
          description: only results where the equipment with the highest level is above or equal to this value
        - schema:
            type: integer
            minimum: 1
            maximum: 200
            format: int32
            example: 200
          in: query
          name: "filter[max_highest_equipment_level]"
          description: only results where the equipment with the highest level is below or equal to this value
        - schema:
            type: integer
            default: 8
            example: 8
            minimum: 1
            maximum: 100
          in: query
          name: limit
          description: maximum number of returned results
        - schema:
            type: boolean
          in: query
          name: "filter[is_cosmetic]"
          description: "filter sets based on if they only got cosmetic items in it. If true, the item ids are for the cosmetic endpoints instead of equipment."
      tags:
        - sets
      x-stoplight:
        id: 7pwfbuzuxnnuq
  "/{game}/v1/{language}/items/quest/search":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
          example: es
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          example: dofus3
          enum:
            - dofus3
            - dofus3beta
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: Search Quest Items
      tags:
        - quest items
      responses:
        "200":
          description: Quest Items Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ListItem"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-items-quest-search
      description: Search in all names and descriptions of quest items with a query.
      parameters:
        - schema:
            type: string
            example: Ficha
          in: query
          name: query
          description: case sensitive search query
          required: true
        - schema:
            type: string
            example: Justicieros
          in: query
          name: "filter[type_name]"
          description: only results with the translated type name
        - schema:
            type: integer
            example: 60
            minimum: 0
            maximum: 200
            format: int32
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 200
            example: 70
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: integer
            default: 8
            example: 8
            minimum: 1
            maximum: 100
          in: query
          description: maximum number of returned results
          name: limit
        - schema:
            type: array
            items:
              type: string
            example:
              - vigilantes
            uniqueItems: true
          in: query
          name: "filter[type_enum]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      x-stoplight:
        id: e7dmshthuyg5m
  "/{game}/v1/{language}/items/consumables/search":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: Search Consumables
      responses:
        "200":
          description: Consumables Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ListItem"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-items-consumables-search
      description: Search in all names and descriptions of consumable items with a query.
      parameters:
        - schema:
            type: string
            example: Wholewrite
          in: query
          name: query
          description: case sensitive search query
          required: true
        - schema:
            type: integer
            format: int32
            maximum: 200
            example: 1
            minimum: 1
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            format: int32
            maximum: 200
            minimum: 1
            example: 200
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: integer
            default: 8
            example: 8
            minimum: 1
            maximum: 100
          in: query
          name: limit
          description: maximum number of returned results
        - schema:
            type: array
            items:
              type: string
            example:
              - bread
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      tags:
        - consumables
      x-stoplight:
        id: 6ogh4aj4k3vns
  "/{game}/v1/{language}/items/resources/search":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: Search Resources
      tags:
        - resources
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ListItem"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-items-resource-search
      description: Search in all names and descriptions of resource items with a query.
      parameters:
        - schema:
            type: string
            example: snowdew
          in: query
          name: query
          description: case sensitive search query
          required: true
        - schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 200
            example: 150
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 200
            example: 200
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: integer
            default: 8
            example: 8
            minimum: 1
            maximum: 100
          in: query
          name: limit
          description: maximum number of returned results
        - schema:
            type: array
            items:
              type: string
            example:
              - plant
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      x-stoplight:
        id: l2f1uw9hdicac
  "/{game}/v1/{language}/search":
    get:
      summary: Game Search
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                x-examples:
                  Example 1:
                    - name: Paztek Sandals
                      ankama_id: 20463
                      type: items-equipment
                    - name: Paztek Mask
                      ankama_id: 20465
                      type: items-equipment
                    - name: Paztek Cloak
                      ankama_id: 20464
                      type: items-equipment
                items:
                  $ref: "#/components/schemas/GameSearch"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-game-search
      description: Search in all names and descriptions of all supported types in the game. For the list of supported types see the endpoint /dofus3/meta/search/types.
      parameters:
        - schema:
            type: string
            example: paztek
          in: query
          name: query
          description: search query
          required: true
        - schema:
            type: array
            uniqueItems: true
            example:
              - items-equipment
            items:
              type: string
              enum:
                - items-consumables
                - items-cosmetics
                - items-resources
                - items-equipment
                - items-quest_items
                - mounts
                - sets
          in: query
          name: "filter[search_index]"
          description: only results with all specific type
          explode: false
        - schema:
            type: integer
            default: 8
            example: 8
            minimum: 1
            maximum: 100
          in: query
          name: limit
          description: maximum number of returned results
        - schema:
            type: array
            uniqueItems: true
            example:
              - level
            items:
              type: string
              enum:
                - level
                - image_urls
                - type
          explode: false
          in: query
          name: "fields[item]"
          description: adds fields from the item search to the list entries if the hit is a item. Multiple comma separated values allowed.
        - schema:
            type: array
            items:
              type: string
            example:
              - boots
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: 'multi-filter results with the english item type name, including "mount" and "set" from filter[type]. Add with "wood" or "+wood" and exclude with "-wood".'
          explode: false
      tags:
        - game
      x-stoplight:
        id: zxx3tt0z25gz8
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
  "/{game}/v1/{language}/items/equipment/search":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: Search Equipment
      tags:
        - equipment
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ListItem"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-items-equipment-search
      description: Search in all names and descriptions of equipment items with a query.
      parameters:
        - schema:
            type: string
            example: nidas
          in: query
          name: query
          description: case sensitive search query
          required: true
        - schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 200
            example: 150
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            format: int32
            example: 200
            minimum: 1
            maximum: 200
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: integer
            default: 8
            example: 8
            minimum: 1
            maximum: 100
          in: query
          name: limit
          description: maximum number of returned results
        - schema:
            type: array
            items:
              type: string
            example:
              - boots
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      x-stoplight:
        id: 4lzcb55gkjj2z
  "/{game}/v1/{language}/items/cosmetics/search":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: Search Cosmetics
      tags:
        - cosmetics
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ListItem"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-cosmetics-search
      description: Search in all names and descriptions of cosmetic items with a query.
      parameters:
        - schema:
            type: string
            example: nedora
          in: query
          name: query
          description: case sensitive search query
          required: true
        - schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 200
            example: 1
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 200
            example: 2
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: integer
            default: 8
            example: 8
            minimum: 1
            maximum: 100
          in: query
          name: limit
          description: maximum number of returned results
        - schema:
            type: array
            items:
              type: string
            example:
              - wings
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      x-stoplight:
        id: mw8gyg65z17wf
  "/{game}/v1/{language}/items/cosmetics/{ankama_id}":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: integer
          example: 24132
        name: ankama_id
        in: path
        required: true
        description: identifier
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: Single Cosmetics
      tags:
        - cosmetics
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Equipment"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-cosmetics-single
      description: Retrieve a specific cosmetic item with id.
      parameters: []
      x-internal: false
      x-stoplight:
        id: a0ks17l0zqqaj
  "/{game}/v1/{language}/items/resources/{ankama_id}":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: integer
          example: 7295
        name: ankama_id
        in: path
        required: true
        description: identifier
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: Single Resources
      tags:
        - resources
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-items-resources-single
      description: Retrieve a specific resource item with id.
      parameters: []
      x-stoplight:
        id: viqn5ujmwoi9s
  "/{game}/v1/{language}/items/equipment/{ankama_id}":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: integer
          example: 26009
        name: ankama_id
        in: path
        required: true
        description: identifier
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: Single Equipment
      tags:
        - equipment
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Weapon"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-items-equipment-single
      description: Retrieve a specific equipment item with id.
      parameters: []
      x-stoplight:
        id: e2j6pr8n8112g
  "/{game}/v1/{language}/items/consumables/{ankama_id}":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: integer
          example: 17206
        name: ankama_id
        in: path
        required: true
        description: identifier
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: Single Consumables
      tags:
        - consumables
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-items-consumables-single
      description: Retrieve a specific consumable item with id.
      parameters: []
      x-stoplight:
        id: n40tefsprc7oq
  "/{game}/v1/{language}/items/quest/{ankama_id}":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: integer
          example: 25256
        name: ankama_id
        in: path
        required: true
        description: identifier
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: Single Quest Items
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-item-quest-single
      description: Retrieve a specific quest item with id.
      parameters: []
      tags:
        - quest items
      x-stoplight:
        id: 74dxhpw46pxzc
  "/{game}/v1/{language}/mounts/{ankama_id}":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: integer
          example: 180
        name: ankama_id
        in: path
        required: true
        description: identifier
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: Single Mounts
      tags:
        - mounts
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Mount"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-mounts-single
      description: Retrieve a specific mount with id.
      parameters: []
      x-stoplight:
        id: pzqoy2btp2qkn
  "/{game}/v1/{language}/sets/{ankama_id}":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: integer
          example: 499
        name: ankama_id
        in: path
        required: true
        description: identifier
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: Single Sets
      tags:
        - sets
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EquipmentSet"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-sets-single
      description: Retrieve a specific set with id.
      parameters: []
      x-stoplight:
        id: 7h3o04n689qab
  "/{game}/v1/{language}/sets":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: List Sets
      tags:
        - sets
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEquipmentSet"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-sets-list
      description: Retrieve a list of sets.
      parameters:
        - schema:
            type: string
            enum:
              - asc
              - desc
            example: asc
          in: query
          name: "sort[level]"
          description: "sort the resulting list by level, default unsorted"
        - schema:
            type: integer
            minimum: 1
            format: int32
            maximum: 200
            example: 190
          in: query
          name: "filter[min_highest_equipment_level]"
          description: only results where the equipment with the highest level is above or equal to this value
        - schema:
            type: integer
            minimum: 1
            maximum: 200
            example: 200
            format: int32
          in: query
          name: "filter[max_highest_equipment_level]"
          description: only results where the equipment with the highest level is below or equal to this value
        - schema:
            type: integer
            minimum: -1
            example: 20
            format: int32
          in: query
          name: "page[size]"
          description: size of the results from the list. -1 disables pagination and gets all in one response.
        - schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
          in: query
          name: "page[number]"
          description: "page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16."
        - schema:
            type: array
            uniqueItems: true
            example:
              - equipment_ids
            items:
              type: string
              enum:
                - effects
                - equipment_ids
          in: query
          name: "fields[set]"
          description: adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed.
          explode: false
        - schema:
            type: boolean
          in: query
          name: "filter[contains_cosmetics_only]"
          description: "filter sets based on if they only got cosmetic items in it. If true, the item ids are for the cosmetic endpoints instead of equipment."
        - schema:
            type: boolean
          in: query
          name: "filter[contains_cosmetics]"
          description: filter sets based on if they got cosmetic items in it.
      x-stoplight:
        id: s3zlet293u7sh
  "/{game}/v1/{language}/mounts":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: List Mounts
      tags:
        - mounts
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListMounts"
              examples: {}
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-mounts-list
      description: Retrieve a list of mounts.
      parameters:
        - schema:
            type: string
            example: Dragoturkey
          in: query
          name: "filter[family.name]"
          description: only results with the translated family name
        - schema:
            type: integer
            minimum: -1
            example: 10
          in: query
          name: "page[size]"
          description: size of the results from the list. -1 disables pagination and gets all in one response.
        - schema:
            type: integer
            minimum: 0
            example: 1
          in: query
          name: "page[number]"
          description: "page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16."
        - schema:
            type: array
            uniqueItems: true
            example:
              - effects
            items:
              type: string
              enum:
                - effects
          in: query
          name: "fields[mount]"
          explode: false
          description: adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed.
        - schema:
            type: integer
          in: query
          name: "filter[family.id]"
          description: only results with the unique family id
      x-stoplight:
        id: gy9ldukmg67hy
  "/{game}/v1/{language}/items/equipment":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
          example: en
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: List Equipment
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListItems"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-items-equipment-list
      description: Retrieve a list of equipment items.
      parameters:
        - schema:
            type: string
            enum:
              - asc
              - desc
            example: desc
          in: query
          name: "sort[level]"
          description: "sort the resulting list by level, default unsorted"
        - schema:
            type: integer
            example: 10
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            minimum: 0
            example: 60
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: integer
            minimum: -1
            example: 5
          in: query
          name: "page[size]"
          description: size of the results from the list. -1 disables pagination and gets all in one response.
        - schema:
            type: integer
            minimum: 0
            example: 1
          in: query
          name: "page[number]"
          description: "page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16."
        - schema:
            type: array
            uniqueItems: true
            example:
              - is_weapon
            items:
              type: string
              enum:
                - recipe
                - description
                - conditions
                - effects
                - is_weapon
                - pods
                - parent_set
                - critical_hit_probability
                - critical_hit_bonus
                - max_cast_per_turn
                - ap_cost
                - range
          explode: false
          in: query
          name: "fields[item]"
          description: adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed.
        - schema:
            type: array
            items:
              type: string
            example:
              - sword
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      tags:
        - equipment
      x-stoplight:
        id: z7ihi4fuba4rk
  "/{game}/v1/{language}/items/resources":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: List Resources
      tags:
        - resources
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListItems"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-items-resources-list
      description: Retrieve a list of resource items.
      parameters:
        - schema:
            type: string
            enum:
              - asc
              - desc
            example: desc
          in: query
          name: "sort[level]"
          description: "sort the resulting list by level, default unsorted"
        - schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 200
            example: 160
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 200
            example: 190
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: integer
            minimum: -1
            example: 10
          in: query
          name: "page[size]"
          description: size of the results from the list. -1 disables pagination and gets all in one response.
        - schema:
            type: integer
            minimum: 0
            example: 1
          in: query
          name: "page[number]"
          description: "page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16."
        - schema:
            type: array
            uniqueItems: true
            example:
              - recipe
            items:
              type: string
              enum:
                - recipe
                - description
                - conditions
                - effects
          explode: false
          in: query
          name: "fields[item]"
          description: adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed.
        - schema:
            type: array
            items:
              type: string
            example:
              - wood
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      x-stoplight:
        id: z2jx5o5pjumhs
  "/{game}/v1/{language}/items/consumables":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: List Consumables
      tags:
        - consumables
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListItems"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-items-consumables-list
      description: Retrieve a list of consumable items.
      parameters:
        - schema:
            type: string
            enum:
              - asc
              - desc
            example: asc
          in: query
          name: "sort[level]"
          description: "sort the resulting list by level, default unsorted"
        - schema:
            type: integer
            example: 150
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            example: 180
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: integer
            minimum: -1
            example: 2
          in: query
          name: "page[size]"
          description: size of the results from the list. -1 disables pagination and gets all in one response.
        - schema:
            type: integer
            minimum: 0
            example: 1
          in: query
          name: "page[number]"
          description: "page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16."
        - schema:
            type: array
            uniqueItems: true
            example:
              - recipe
            items:
              type: string
              enum:
                - recipe
                - description
                - conditions
                - effects
          explode: false
          in: query
          description: adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed.
          name: "fields[item]"
        - schema:
            type: array
            items:
              type: string
            example:
              - chest
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      x-stoplight:
        id: g2xcp6fribgyf
  "/{game}/v1/{language}/items/quest":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
          example: fr
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: List Quest Items
      tags:
        - quest items
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListItems"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-items-quest-list
      description: Retrieve a list of quest items.
      parameters:
        - schema:
            type: string
            enum:
              - asc
              - desc
            example: desc
          in: query
          name: "sort[level]"
          description: "sort the resulting list by level, default unsorted"
        - schema:
            type: integer
            example: 1
            format: int32
            minimum: 0
            maximum: 200
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            example: 50
            minimum: 0
            maximum: 200
            format: int32
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: integer
            minimum: -1
            example: 5
          in: query
          name: "page[size]"
          description: size of the results from the list. -1 disables pagination and gets all in one response.
        - schema:
            type: integer
            minimum: 0
            example: 1
          in: query
          description: "page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16."
          name: "page[number]"
        - schema:
            type: array
            uniqueItems: true
            example:
              - recipe
            items:
              type: string
              enum:
                - recipe
                - description
                - conditions
                - effects
          explode: false
          in: query
          description: adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed.
          name: "fields[item]"
        - schema:
            type: array
            items:
              type: string
            example:
              - sufokia
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      x-stoplight:
        id: qsq51akecj0r0
  "/{game}/v1/{language}/items/cosmetics":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
          example: fr
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: List Cosmetics
      tags:
        - cosmetics
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListItems"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-cosmetics-list
      description: Retrieve a list of cosmetic items.
      parameters:
        - schema:
            type: string
            enum:
              - asc
              - desc
            example: asc
          in: query
          name: "sort[level]"
          description: "sort the resulting list by level, default unsorted"
        - schema:
            type: integer
            example: 1
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            example: 5
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: integer
            minimum: -1
            example: 5
          in: query
          name: "page[size]"
          description: size of the results from the list. -1 disables pagination and gets all in one response.
        - schema:
            type: integer
            minimum: 0
            example: 1
          in: query
          name: "page[number]"
          description: "page number based on the current page[size]. So you could get page 1 with 8 entrys and page 2 would have entries 8 to 16."
        - schema:
            type: array
            uniqueItems: true
            example:
              - recipe
            items:
              type: string
              enum:
                - recipe
                - description
                - conditions
                - effects
                - is_weapon
                - pods
                - parent_set
                - critical_hit_probability
                - critical_hit_bonus
                - max_cast_per_turn
                - ap_cost
                - range
          explode: false
          in: query
          description: adds fields from their detail endpoint to the item list entries. Multiple comma separated values allowed.
          name: "fields[item]"
        - schema:
            type: array
            items:
              type: string
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      x-stoplight:
        id: mlmwp9s8utn2j
  "/{game}/v1/{language}/mounts/all":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: List All Mounts
      tags:
        - mounts
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListMounts"
              examples:
                defaults:
                  value:
                    _links:
                      first: null
                      prev: null
                      next: null
                      last: null
                    items:
                      - ankama_id: 0
                        name: string
                        family_name: string
                        image_urls:
                          icon: string
                          sd: string
                          hq: string
                          hd: string
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-all-mounts-list
      description: |-
        Retrieve all mounts with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]=-1) and all fields[type] set.

        If you want everything unfiltered, delete the other query parameters.

        Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!

        Tip: set the HTTP Header 'Accept-Encoding: gzip' for saving bandwidth. You will need to uncompress it on your end.
        Example with cURL:
        ```
        curl -sH 'Accept-Encoding: gzip' <api-endpoint> | gunzip -
        ```
      parameters:
        - schema:
            type: string
            example: Dragoturkey
          in: query
          name: "filter[family.name]"
          description: only results with the translated family name
        - schema:
            type: string
            enum:
              - gzip
          in: header
          name: Accept-Encoding
          description: optional compression for saving bandwidth
        - schema:
            type: integer
          in: query
          name: "filter[family.id]"
          description: only results with the unique family id
      x-stoplight:
        id: 35hwizajcz3g7
  "/{game}/v1/{language}/sets/all":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: List All Sets
      tags:
        - sets
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEquipmentSets"
              examples:
                defaults:
                  value:
                    _links:
                      first: null
                      prev: null
                      next: null
                      last: null
                    sets:
                      - ankama_id: 0
                        name: string
                        items: 0
                        level: 0
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-all-sets-list
      description: |-
        Retrieve all sets with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]=-1) and all fields[type] set.

        If you want everything unfiltered, delete the other query parameters.

        Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!

        Tip: set the HTTP Header 'Accept-Encoding: gzip' for saving bandwidth. You will need to uncompress it on your end.
        Example with cURL:
        ```
        curl -sH 'Accept-Encoding: gzip' <api-endpoint> | gunzip -
        ```
      parameters:
        - schema:
            type: string
            enum:
              - asc
              - desc
            example: asc
          in: query
          name: "sort[level]"
          description: "sort the resulting list by level, default unsorted"
        - schema:
            type: integer
            minimum: 1
            format: int32
            maximum: 200
            example: 190
          in: query
          name: "filter[min_highest_equipment_level]"
          description: only results where the equipment with the highest level is above or equal to this value
        - schema:
            type: integer
            minimum: 1
            maximum: 200
            example: 200
            format: int32
          in: query
          name: "filter[max_highest_equipment_level]"
          description: only results where the equipment with the highest level is below or equal to this value
        - schema:
            type: string
            enum:
              - gzip
          in: header
          name: Accept-Encoding
          description: optional compression for saving bandwidth
        - schema:
            type: boolean
          in: query
          description: "filter sets based on if they only got cosmetic items in it. If true, the item ids are for the cosmetic endpoints instead of equipment."
          name: "filter[contains_cosmetics_only]"
        - schema:
            type: boolean
          in: query
          name: "filter[contains_cosmetics]"
          description: filter sets based on if they got cosmetic items in it.
      x-stoplight:
        id: rzxp5sotapqe6
  "/{game}/v1/{language}/items/cosmetics/all":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
          example: fr
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: List All Cosmetics
      tags:
        - cosmetics
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListItems"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-all-cosmetics-list
      description: |-
        Retrieve all cosmetic items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]=-1) and all fields[type] set.

        If you want everything unfiltered, delete the other query parameters.

        Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!

        Tip: set the HTTP Header 'Accept-Encoding: gzip' for saving bandwidth. You will need to uncompress it on your end.
        Example with cURL:
        ```
        curl -sH 'Accept-Encoding: gzip' <api-endpoint> | gunzip -
        ```
      parameters:
        - schema:
            type: string
            enum:
              - asc
              - desc
            example: asc
          in: query
          name: "sort[level]"
          description: "sort the resulting list by level, default unsorted"
        - schema:
            type: integer
            example: 1
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            example: 5
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: string
            enum:
              - gzip
          in: header
          name: Accept-Encoding
          description: optional compression for saving bandwidth
        - schema:
            type: array
            items:
              type: string
            example:
              - boots
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      x-stoplight:
        id: 07si7hjof1qpt
  "/{game}/v1/{language}/items/quest/all":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
          example: fr
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: List All Quest Items
      tags:
        - quest items
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListItems"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-all-items-quest-list
      description: |-
        Retrieve all quest items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]=-1) and all fields[type] set.

        If you want everything unfiltered, delete the other query parameters.

        Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!

        Tip: set the HTTP Header 'Accept-Encoding: gzip' for saving bandwidth. You will need to uncompress it on your end.
        Example with cURL:
        ```
        curl -sH 'Accept-Encoding: gzip' <api-endpoint> | gunzip -
        ```
      parameters:
        - schema:
            type: string
            enum:
              - asc
              - desc
            example: desc
          in: query
          name: "sort[level]"
          description: "sort the resulting list by level, default unsorted"
        - schema:
            type: integer
            example: 1
            format: int32
            minimum: 0
            maximum: 200
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            example: 50
            minimum: 0
            maximum: 200
            format: int32
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: string
            enum:
              - gzip
          in: header
          name: Accept-Encoding
          description: optional compression for saving bandwidth
        - schema:
            type: array
            items:
              type: string
            example:
              - boots
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      x-stoplight:
        id: mgmt97sgtrhja
  "/{game}/v1/{language}/items/consumables/all":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: List All Consumables
      tags:
        - consumables
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListItems"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-all-items-consumables-list
      description: |-
        Retrieve all consumable items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]=-1) and all fields[type] set.

        If you want everything unfiltered, delete the other query parameters.

        Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!

        Tip: set the HTTP Header 'Accept-Encoding: gzip' for saving bandwidth. You will need to uncompress it on your end.
        Example with cURL:
        ```
        curl -sH 'Accept-Encoding: gzip' <api-endpoint> | gunzip -
        ```
      parameters:
        - schema:
            type: string
            enum:
              - asc
              - desc
            example: asc
          in: query
          name: "sort[level]"
          description: "sort the resulting list by level, default unsorted"
        - schema:
            type: integer
            example: 150
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            example: 180
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: string
            enum:
              - gzip
          in: header
          name: Accept-Encoding
          description: optional compression for saving bandwidth
        - schema:
            type: array
            items:
              type: string
            example:
              - boots
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      x-stoplight:
        id: llcg4hmp9wucr
  "/{game}/v1/{language}/items/resources/all":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: List All Resources
      tags:
        - resources
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListItems"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-all-items-resources-list
      description: |-
        Retrieve all resource items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]=-1) and all fields[type] set.

        If you want everything unfiltered, delete the other query parameters.

        Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!

        Tip: set the HTTP Header 'Accept-Encoding: gzip' for saving bandwidth. You will need to uncompress it on your end.
        Example with cURL:
        ```
        curl -sH 'Accept-Encoding: gzip' <api-endpoint> | gunzip -
        ```
      parameters:
        - schema:
            type: string
            enum:
              - asc
              - desc
            example: desc
          in: query
          name: "sort[level]"
          description: "sort the resulting list by level, default unsorted"
        - schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 200
            example: 160
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 200
            example: 190
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: string
            enum:
              - gzip
          in: header
          name: Accept-Encoding
          description: optional compression for saving bandwidth
        - schema:
            type: array
            items:
              type: string
            example:
              - boots
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      x-stoplight:
        id: 1wtcbwhh04jmq
  "/{game}/v1/{language}/items/equipment/all":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
            - pt
          maxLength: 2
          minLength: 2
          example: en
        name: language
        in: path
        required: true
        description: a valid language code
      - schema:
          type: string
          enum:
            - dofus3
            - dofus3beta
          example: dofus3
        name: game
        in: path
        required: true
        description: dofus3 | dofus3beta
    get:
      summary: List All Equipment
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListItems"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: get-all-items-equipment-list
      description: |-
        Retrieve all equipment items with one request. This endpoint is just an alias for the a list with disabled pagination (page[size]=-1) and all fields[type] set.

        If you want everything unfiltered, delete the other query parameters.

        Be careful with testing or (god forbid) using /all in your browser, the returned json is huge and will slow down the browser!

        Tip: set the HTTP Header 'Accept-Encoding: gzip' for saving bandwidth. You will need to uncompress it on your end.
        Example with cURL:
        ```
        curl -sH 'Accept-Encoding: gzip' <api-endpoint> | gunzip -
        ```
      parameters:
        - schema:
            type: string
            enum:
              - asc
              - desc
            example: desc
          in: query
          name: "sort[level]"
          description: "sort the resulting list by level, default unsorted"
        - schema:
            type: integer
            example: 10
          in: query
          name: "filter[min_level]"
          description: only results which level is equal or above this value
        - schema:
            type: integer
            minimum: 0
            example: 60
          in: query
          name: "filter[max_level]"
          description: only results which level is equal or below this value
        - schema:
            type: string
            enum:
              - gzip
          in: header
          name: Accept-Encoding
          description: optional compression for saving bandwidth
        - schema:
            type: array
            items:
              type: string
            example:
              - boots
            uniqueItems: true
          in: query
          name: "filter[type.name_id]"
          description: multi-filter results with the english type name. Add with "wood" or "+wood" and exclude with "-wood".
          explode: false
      tags:
        - equipment
      x-stoplight:
        id: wbxzhlcid1l0w
  "/dofus3/{language}/almanax":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
          example: fr
        name: language
        in: path
        required: true
        description: code
    get:
      summary: Almanax Range
      tags:
        - almanax
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Almanax"
              examples:
                "range[size] 2":
                  value:
                    - bonus:
                        description: "The experience points awarded for completing alignment quests and city order quests are increased by 100%. What's more, a special repeatable quest is available today inside the militias of Bonta and Brakmar. It is available to aligned players of level 20 or higher and is not attached to the offering quest."
                        type:
                          id: bonta-and-brakmar
                          name: Bonta and Brakmar
                      date: "2022-09-12"
                      tribute:
                        item:
                          ankama_id: 14284
                          image_urls:
                            hd: "https://api.dofusdu.de/dofus3/img/item/15247-800.png"
                            hq: "https://api.dofusdu.de/dofus3/img/item/15247-400.png"
                            icon: "https://api.dofusdu.de/dofus3/img/item/15247.png"
                            sd: "https://api.dofusdu.de/dofus3/img/item/15247-200.png"
                          name: Spectral Flame
                          subtype: resources
                        quantity: 2
                    - bonus:
                        description: The quantity of Flax harvested by farmers is increased by 125%.
                        type:
                          id: plenty-to-harvest
                          name: Plenty to harvest
                      date: "2022-09-13"
                      tribute:
                        item:
                          ankama_id: 423
                          image_urls:
                            hd: "https://api.dofusdu.de/dofus3/img/item/34122-800.png"
                            hq: "https://api.dofusdu.de/dofus3/img/item/34122-400.png"
                            icon: "https://api.dofusdu.de/dofus3/img/item/34122.png"
                            sd: "https://api.dofusdu.de/dofus3/img/item/34122-200.png"
                          name: Flax
                          subtype: resources
                        quantity: 20
      operationId: get-almanax-range
      description: |-
        Get a range of dates, defaults to today + 6 following days but can specified by the query parameters. 

        filter[bonus_type] can be used seperately and does not have an effect on the other parameters.

        range[from] changes the start date, everything else defaults to 6 following dates from this start date.

        range[to] when used without anything else, it will use today as start date and this parameter as end. All ranges are inclusive.

        range[from] + range[to] = inclusive range over the specified dates, should never be farther apart than 35 days.

        range[from|to] + range[size] no need to specify the date, just following days with [from] (0 is today) or go backwards in time with only [to] and [size].

        Not all combinations are listed but this should give you an idea how to they could work.
      parameters:
        - schema:
            type: string
            example: experience-points
          in: query
          name: "filter[bonus_type]"
          description: "ids from meta/{language}/almanax/bonuses"
        - schema:
            type: string
            example: "2016-09-15"
            format: date
          in: query
          name: "range[from]"
          description: yyyy-mm-dd
        - schema:
            type: string
            example: "2016-09-28"
            format: date
          in: query
          name: "range[to]"
          description: yyyy-mm-dd
        - schema:
            type: integer
            format: int32
            example: -1
            minimum: -1
            maximum: 370
          in: query
          name: "range[size]"
          description: size of the returned range
        - schema:
            type: string
            default: Europe/Paris
            example: Europe/Paris
          in: query
          name: timezone
          description: 'determine what the current time is. If you live in Brazil, "today" will be hours apart from Paris. Use your timezone to get results relative to your location.'
      x-stoplight:
        id: fy8l7o3sz1jyo
  "/dofus3/{language}/almanax/{date}":
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
          example: fr
        name: language
        in: path
        required: true
        description: code
      - schema:
          type: string
          example: "2020-07-14"
          format: date
        name: date
        in: path
        required: true
        description: yyyy-mm-dd
    get:
      summary: Single Almanax Date
      tags:
        - almanax
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Almanax"
              examples:
                9/11:
                  value:
                    bonus:
                      description: "Les quantités de ressources récupérées par les récolteurs et les chasseurs sont augmentées de 50 % dans toutes les zones influencées par une anomalie temporelle. De plus, les gains d'expérience et les chances d'obtenir du butin sont augmentés de 25 % dans la zone du Sanctuaire des Dragoeufs."
                      type:
                        id: reward-bonus
                        name: Bonus des anomalies
                    date: "2022-09-11"
                    tribute:
                      item:
                        ankama_id: 8362
                        image_urls:
                          hd: "https://api.dofusdu.de/dofus3/img/item/59611-800.png"
                          hq: "https://api.dofusdu.de/dofus3/img/item/59611-400.png"
                          icon: "https://api.dofusdu.de/dofus3/img/item/59611.png"
                          sd: "https://api.dofusdu.de/dofus3/img/item/59611-200.png"
                        name: Peau de Dragnarok
                        subtype: resources
                      quantity: 2
      operationId: get-almanax-date
      description: Get a single date. There are not more details in the returned object than the normal range endpoint.
      x-stoplight:
        id: d0000xjgaenyh
  /dofus3/meta/elements:
    get:
      summary: Effects and Condition Elements
      tags:
        - meta
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                id = index:
                  value:
                    - Vitality
                    - Intelligence
      operationId: get-meta-elements
      description: Get the mappings for all specific elements that are linked in the dataset. All names are english. Translations are not needed because of a global unique id which is the index inside the array. Future elements will get a higher id.
      parameters: []
      x-stoplight:
        id: 4oyiu8nbwwgds
    parameters: []
  /dofus3/meta/version:
    get:
      summary: Game Version
      tags:
        - meta
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
              examples: {}
      operationId: get-meta-version
      description: The current game version of the hosted data.
      parameters: []
      x-stoplight:
        id: ha9mde87rn0in
    parameters: []
  /dofus3/meta/search/types:
    get:
      summary: Available Game Search Types
      tags:
        - meta
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                List:
                  value:
                    - items-consumables
                    - items-cosmetics
                    - items-resources
                    - items-equipment
                    - items-quest_items
                    - mounts
                    - sets
      operationId: get-game-search-types
      description: "Get all types for /{game}/v1/{lang}/search available for filtering. All names are english for comparing them inside applications. Order is fixed so you can compare indices instead of strings."
      parameters: []
      x-stoplight:
        id: v67mknkhaif2h
    parameters: []
  /dofus3/meta/items/types:
    get:
      summary: Available Item Types
      tags:
        - meta
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                List:
                  value:
                    - items-consumables
                    - items-cosmetics
                    - items-resources
                    - items-equipment
                    - items-quest_items
                    - mounts
                    - sets
      operationId: get-item-types
      description: |-
        Get all types of all items. Primarily used for filtering more detailed types in listings or search endpoints.
        All names are english for comparing them inside applications.
        Ordering is not guaranteed to persist with game updates.
      parameters: []
      x-stoplight:
        id: j8a5zpi8i20xe
    parameters: []
  "/dofus3/meta/{language}/almanax/bonuses":
    get:
      summary: Available Almanax Bonuses
      tags:
        - meta
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                x-examples:
                  example-1:
                    - id: reward-bonus
                      name: Reward Bonus
                    - id: loot
                      name: Loot
                    - id: plenty-of-fish
                      name: Plenty of fish
              examples:
                en:
                  value:
                    - id: reward-bonus
                      name: Reward Bonus
                    - id: loot
                      name: Loot
                    - id: plenty-of-fish
                      name: Plenty of fish
      operationId: get-meta-almanax-bonuses
      description: Get all the available bonuses and their id for filtering them in the range endpoint.
      parameters: []
      x-stoplight:
        id: y3rp6gd28quli
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
          example: fr
        name: language
        in: path
        required: true
        description: a valid language code
  "/dofus3/meta/{language}/almanax/bonuses/search":
    get:
      summary: Search Available Almanax Bonuses
      tags:
        - meta
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                x-examples:
                  example-1:
                    - id: reward-bonus
                      name: Reward Bonus
                    - id: loot
                      name: Loot
                    - id: plenty-of-fish
                      name: Plenty of fish
              examples:
                en:
                  value:
                    - id: reward-bonus
                      name: Reward Bonus
                    - id: loot
                      name: Loot
                    - id: plenty-of-fish
                      name: Plenty of fish
      operationId: get-meta-almanax-bonuses-search
      description: Search all the available bonuses and their id for filtering them in the range endpoint.
      parameters:
        - schema:
            type: string
            example: abond
          in: query
          name: query
          description: case sensitive search query
          required: true
        - schema:
            type: integer
          in: query
          name: limit
          description: maximum number of returned results
      x-stoplight:
        id: wacmug1sb1oe9
    parameters:
      - schema:
          type: string
          enum:
            - en
            - fr
            - de
            - it
            - es
          example: fr
        name: language
        in: path
        required: true
        description: a valid language code
  /meta/webhooks/twitter:
    get:
      summary: Get Twitter Hook Metainfo
      tags:
        - webhooks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptions:
                    type: array
                    items:
                      type: string
                x-examples:
                  example-1:
                    subscriptions:
                      - dofus3_en
                      - dofus3_fr
                      - dofus3_es
                      - dofus3_it
                      - dofus3_de
              examples:
                Example 1:
                  value:
                    subscriptions:
                      - string
      operationId: get-meta-webhooks-twitter
      description: "Get a list of all available subscriptions. "
      x-stoplight:
        id: x2su9os7cdw6n
  /meta/webhooks/rss:
    get:
      summary: Get RSS Hook Metainfo
      tags:
        - webhooks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptions:
                    type: array
                    items:
                      type: string
                x-examples:
                  example-1:
                    subscriptions:
                      - dofus3_en
                      - dofus3_fr
                      - dofus3_es
                      - dofus3_it
                      - dofus3_de
      operationId: get-meta-webhooks-rss
      description: "Get a list of all available subscriptions. "
      x-stoplight:
        id: ryea84v1mw1ak
  /meta/webhooks/almanax:
    get:
      summary: Get Almanax Hook Metainfo
      tags:
        - webhooks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptions:
                    type: array
                    items:
                      type: string
                x-examples:
                  example-1:
                    subscriptions:
                      - dofus3_en
                      - dofus3_fr
                      - dofus3_es
                      - dofus3_it
                      - dofus3_de
              examples:
                example-1:
                  value:
                    subscriptions:
                      - string
      operationId: get-meta-webhooks-almanax
      description: "Get a list of all available subscriptions. "
      x-stoplight:
        id: 4lrj2cmhjnm2s
  "/webhooks/rss/{id}":
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: the ID returned from the API when creating the webhook
    get:
      summary: Get RSS Hook
      tags:
        - webhooks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RssWebhook"
              examples:
                Example:
                  value:
                    id: string
                    whitelist: null
                    blacklist: null
                    subscriptions:
                      - dofus3-fr-official-news
                    format: discord
                    preview_length: 150
                    created_at: "2022-10-25T15:32:37.406281+02:00"
                    last_fired_at: "2022-10-25T15:35:37.103240+02:00"
                    updated_at: "2022-10-25T15:32:37.406281+02:00"
      operationId: get-webhooks-rss-id
      description: Retrieve details about an existing RSS Webhook with a given uuid.
      x-stoplight:
        id: u2trp6aa29zke
    put:
      summary: Update RSS Hook
      operationId: put-webhooks-rss-id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RssWebhook"
              examples:
                Example:
                  value:
                    id: string
                    whitelist: null
                    blacklist: null
                    subscriptions:
                      - dofus3-fr-official-news
                    format: discord
                    preview_length: 150
                    created_at: "2022-10-25T15:32:37.406281+02:00"
                    last_fired_at: "2022-10-25T15:35:37.103240+02:00"
                    updated_at: "2022-10-25T15:32:37.406281+02:00"
      description: "Update the details of a RSS Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutRSSWebhook"
            examples:
              Example:
                value:
                  whitelist: null
                  blacklist: null
                  subscriptions: null
                  preview_length: 60
        description: ""
      tags:
        - webhooks
      x-stoplight:
        id: gxa2aqic6jm2e
    delete:
      summary: Unregister RSS Hook
      operationId: delete-webhooks-rss-id
      responses:
        "204":
          description: No Content
      description: Delete a Webhook from the service.
      tags:
        - webhooks
      x-stoplight:
        id: dzqt93ubm594i
  "/webhooks/twitter/{id}":
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: the ID returned from the API when creating the webhook
    get:
      summary: Get Twitter Hook
      tags:
        - webhooks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TwitterWebhook"
              examples:
                Example:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    whitelist:
                      - unity
                    blacklist:
                      - retro
                    subscriptions:
                      - DOFUS_EN
                    format: discord
                    preview_length: 280
                    created_at: "2022-10-25T15:32:37.406281+02:00"
                    last_fired_at: "2022-10-25T15:35:37.103240+02:00"
                    updated_at: "2022-10-25T15:32:37.406281+02:00"
      operationId: get-webhooks-twitter-id
      description: Retrieve details about an existing Twitter Webhook with a given uuid.
      x-stoplight:
        id: b17dskp86rnqw
    put:
      summary: Update Twitter Hook
      operationId: put-webhooks-twitter-id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TwitterWebhook"
              examples:
                Example:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    whitelist:
                      - unity
                    blacklist:
                      - retro
                    subscriptions:
                      - DOFUS_EN
                    format: discord
                    preview_length: 280
                    created_at: "2022-10-25T15:32:37.406281+02:00"
                    last_fired_at: "2022-10-25T15:35:37.103240+02:00"
                    updated_at: "2022-10-25T15:32:37.406281+02:00"
      description: "Update the details of a Twitter Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutTwitterWebhook"
            examples:
              Example:
                value:
                  whitelist:
                    - retro
                  blacklist: null
                  subscriptions:
                    - dofus3-en-official-changelog
                  preview_length: null
        description: ""
      tags:
        - webhooks
      x-stoplight:
        id: qp6uqqs05jye4
    delete:
      summary: Unregister Twitter Hook
      operationId: delete-webhooks-twitter-id
      responses:
        "204":
          description: No Content
      description: Delete a Webhook from the service.
      tags:
        - webhooks
      x-stoplight:
        id: 4o1c8msan9y9v
  "/webhooks/almanax/{id}":
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: the ID returned from the API when creating the webhook
    get:
      summary: Get Almanax Hook
      tags:
        - webhooks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlmanaxWebhook"
              examples:
                Example:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    daily_settings:
                      timezone: Europe/Paris
                      midnight_offset: 0
                    bonus_whitelist:
                      - plenty-to-harvest
                    bonus_blacklist: null
                    subscriptions:
                      - dofus3_en
                    iso_date: false
                    mentions:
                      kolossium-experience:
                        - discord_id: 1234
                          is_role: true
                          ping_days_before: null
                    intervals:
                      - daily
                    weekly_weekday: sunday
                    created_at: "2019-08-24T14:15:22Z"
                    last_fired_at: "2019-08-24T14:15:22Z"
                    updated_at: "2019-08-24T14:15:22Z"
      operationId: get-webhooks-almanax-id
      description: Retrieve details about an existing Almanax Webhook with a given uuid.
      x-stoplight:
        id: tsnn86pyx3vu8
    put:
      summary: Update Almanax Hook
      operationId: put-webhooks-almanax-id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlmanaxWebhook"
              examples:
                Example:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    daily_settings:
                      timezone: Europe/Paris
                      midnight_offset: 0
                    bonus_whitelist:
                      - plenty-to-harvest
                    bonus_blacklist: null
                    subscriptions:
                      - dofus3_en
                    iso_date: false
                    mentions:
                      kolossium-experience:
                        - discord_id: 1234
                          is_role: true
                          ping_days_before: null
                    intervals:
                      - daily
                    weekly_weekday: sunday
                    created_at: "2019-08-24T14:15:22Z"
                    last_fired_at: "2019-08-24T14:15:22Z"
                    updated_at: "2019-08-24T14:15:22Z"
      description: "Update the details of an Almanax Webhook. All fields are optional and arrays will be overwritten, so always put all selected items of an array."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutAlmanaxWebhook"
            examples:
              Example:
                value:
                  bonus_whitelist: []
                  bonus_blacklist: null
                  subscriptions: null
                  daily_settings:
                    timezone: Europe/Paris
                    midnight_offset: 0
                  iso_date: false
                  mentions:
                    kolossium-experience:
                      - discord_id: 1234
                        is_role: true
                        ping_days_before: null
                  intervals:
                    - daily
                  weekly_weekday: sunday
      tags:
        - webhooks
      x-stoplight:
        id: okizp8l5z3on3
    delete:
      summary: Unregister Almanax Hook
      operationId: delete-webhooks-almanax-id
      responses:
        "204":
          description: No Content
      description: Delete a Webhook from the service.
      tags:
        - webhooks
      x-stoplight:
        id: plnosst21p855
  /webhooks/rss:
    post:
      summary: Register RSS Hook
      operationId: post-webhooks-rss
      responses:
        "200":
          description: OK
      description: Register a new Webhook to post RSS news as soon as they are posted.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRSSWebhook"
            examples:
              Example:
                value:
                  whitelist:
                    - retro
                  blacklist: null
                  subscriptions:
                    - dofus3-en-official-news
                  format: discord
                  preview_length: 2000
                  callback: "https://discord.com/api/webhooks/XYZ"
        description: ""
      tags:
        - webhooks
      x-stoplight:
        id: x27z57xp45wte
  /webhooks/twitter:
    post:
      summary: Register Twitter Hook
      operationId: post-webhooks-twitter
      responses:
        "200":
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTwitterWebhook"
            examples:
              Example:
                value:
                  whitelist: null
                  blacklist: null
                  subscriptions:
                    - DOFUSfr
                  format: discord
                  preview_length: 280
                  callback: "https://discord.com/api/webhooks/XYZ"
        description: ""
      description: Register a new Webhook to post Twitter updates as soon as they are posted.
      tags:
        - webhooks
      x-stoplight:
        id: n7hruj6bwd63z
  /webhooks/almanax:
    post:
      summary: Register Almanax Hook
      operationId: post-webhooks-almanax
      responses:
        "200":
          description: OK
      description: Register a new Webhook to post Almanax updates.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlmanaxWebhook"
            examples:
              Example:
                value:
                  bonus_whitelist: null
                  bonus_blacklist: null
                  subscriptions:
                    - dofus3_fr
                  format: discord
                  callback: "https://discord.com/api/webhooks/XYZ"
                  daily_settings:
                    timezone: Europe/Paris
                    midnight_offset: 0
                  iso_date: false
                  mentions:
                    kolossium-experience:
                      - discord_id: 1234
                        is_role: true
                        ping_days_before: null
                  intervals:
                    - daily
                  weekly_weekday: sunday
        description: ""
      tags:
        - webhooks
      x-stoplight:
        id: rgb2d0j47fr0l
components:
  schemas:
    ListItemGeneral:
      type: object
      x-examples: {}
      x-stoplight:
        id: r5b3ia3ectz8q
      title: ListItemGeneral
      properties:
        ankama_id:
          type: integer
        name:
          type: string
        type:
          $ref: "#/components/schemas/TranslatedId"
        item_subtype:
          $ref: "#/components/schemas/ItemSubtype"
        level:
          type: integer
        image_urls:
          $ref: "#/components/schemas/Images"
    ListItem:
      type: object
      x-examples: {}
      x-stoplight:
        id: t7g4fratmdgkx
      title: ListItem
      properties:
        ankama_id:
          type: integer
        name:
          type: string
        type:
          $ref: "#/components/schemas/TranslatedId"
        level:
          type: integer
        image_urls:
          $ref: "#/components/schemas/Images"
        recipe:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Recipe"
        description:
          type: string
          x-stoplight:
            id: t04qfhnlgc4kw
          nullable: true
        conditions:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/ConditionNode"
        effects:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Effect"
        is_weapon:
          type: boolean
          nullable: true
        pods:
          type: integer
          nullable: true
        parent_set:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/TranslatedId"
        critical_hit_probability:
          type: integer
          nullable: true
        critical_hit_bonus:
          type: integer
          nullable: true
        max_cast_per_turn:
          type: integer
          nullable: true
        ap_cost:
          type: integer
          nullable: true
        range:
          $ref: "#/components/schemas/Range"
    Recipe:
      type: object
      properties:
        item_ankama_id:
          type: integer
        item_subtype:
          type: string
        quantity:
          type: integer
      x-examples: {}
      title: Recipe
      x-stoplight:
        id: mb2ht06tym8se
    Effect:
      type: object
      x-examples: {}
      x-tags:
        - meta
      x-stoplight:
        id: frixo5s02x57v
      title: Effect
      properties:
        int_minimum:
          type: integer
          description: "minimum int value, can be a single if ignore_int_max and no ignore_int_min"
        int_maximum:
          type: integer
          description: "maximum int value, if not ignore_int_max and not ignore_int_min, the effect has a range value"
        type:
          $ref: "#/components/schemas/EffectType"
        ignore_int_min:
          type: boolean
          description: "ignore the int min field because the actual value is a string. For readability the templated field is the only important field in this case. "
        ignore_int_max:
          type: boolean
          description: "ignore the int max field, if ignore_int_min is true, int min is a single value"
        formatted:
          type: string
          description: all fields from above encoded in a single string
    EffectType:
      title: EffectType
      x-stoplight:
        id: h9lje70zy2774
      type: object
      properties:
        id:
          type: integer
          x-stoplight:
            id: 8tu8tzm9pnpyl
        name:
          type: string
          x-stoplight:
            id: 57dfic9du6d6s
        is_active:
          type: boolean
          x-stoplight:
            id: adhrzfp84g758
          description: Affects target or source actively.
        is_meta:
          type: boolean
          x-stoplight:
            id: 26vqqj1u5rff2
          description: 'true if a type is generated from the Api instead of Ankama. In that case, always prefer showing the templated string and omit everything else. The "name" field will have an english description of the meta type. An example for such effects are class sets effects.'
    Images:
      type: object
      x-examples: {}
      description: "All images except icon are rendered in the background which can take some time (up to hours if all data is completely generated from scratch). Because of this, they can be null if they are not yet rendered."
      x-stoplight:
        id: ebvisb0pnf46t
      properties:
        icon:
          type: string
          description: "64x64 px, always available"
        sd:
          type: string
          description: around 2x the resolution of icon
          nullable: true
        hq:
          type: string
          description: around 2x the resolution of sd
          nullable: true
        hd:
          type: string
          description: around 2x the resolution of hd
          nullable: true
      title: Images
    Resource:
      type: object
      x-examples: {}
      x-stoplight:
        id: 10otndsm7bw3k
      title: Resource
      properties:
        ankama_id:
          type: integer
        name:
          type: string
        description:
          type: string
        type:
          $ref: "#/components/schemas/TranslatedId"
        level:
          type: integer
        pods:
          type: integer
        image_urls:
          $ref: "#/components/schemas/Images"
        effects:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Effect"
        conditions:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/ConditionNode"
        recipe:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Recipe"
    EquipmentSet:
      x-stoplight:
        id: xmkp08r20yq44
      type: object
      title: EquipmentSet
      properties:
        ankama_id:
          type: integer
        name:
          type: string
        equipment_ids:
          type: array
          items:
            type: integer
        effects:
          $ref: "#/components/schemas/EquipmentSetEffects"
        highest_equipment_level:
          type: integer
        is_cosmetic:
          type: boolean
          x-stoplight:
            id: 7d1w5073pqtt7
    ListEquipmentSet:
      type: object
      x-examples: {}
      x-stoplight:
        id: jzo6pgvj144er
      title: ListSet
      properties:
        ankama_id:
          type: integer
        name:
          type: string
        items:
          type: integer
          description: amount
        level:
          type: integer
        effects:
          $ref: "#/components/schemas/EquipmentSetEffects"
        equipment_ids:
          type: array
          nullable: true
          items:
            type: integer
        is_cosmetic:
          type: boolean
          x-stoplight:
            id: uztiykrx0bobf
    Mount:
      x-stoplight:
        id: t56c7qu8hapx4
      type: object
      title: Mount
      properties:
        ankama_id:
          type: integer
        name:
          type: string
        family:
          $ref: "#/components/schemas/MountFamily"
        image_urls:
          $ref: "#/components/schemas/Images"
        effects:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Effect"
    ListItems:
      x-stoplight:
        id: wp54br61flkau
      type: object
      properties:
        _links:
          $ref: "#/components/schemas/PagedLinks"
        items:
          type: array
          items:
            $ref: "#/components/schemas/ListItem"
      title: ListItems
    ListEquipmentSets:
      x-stoplight:
        id: kr369f842c2w9
      type: object
      title: ListSetPaged
      properties:
        _links:
          $ref: "#/components/schemas/PagedLinks"
        sets:
          type: array
          items:
            $ref: "#/components/schemas/ListEquipmentSet"
    ListMounts:
      x-stoplight:
        id: 67iikn0tj64zs
      type: object
      properties:
        _links:
          $ref: "#/components/schemas/PagedLinks"
        items:
          type: array
          items:
            $ref: "#/components/schemas/Mount"
      title: ListMounts
    PagedLinks:
      title: PagedLinks
      x-stoplight:
        id: 60s06npdim49u
      type: object
      properties:
        first:
          type: string
          nullable: true
        prev:
          type: string
          nullable: true
        next:
          type: string
          nullable: true
        last:
          type: string
          nullable: true
    Condition:
      x-stoplight:
        id: cfe46yvylz0b5
      type: object
      properties:
        operator:
          type: string
        int_value:
          type: integer
        element:
          $ref: "#/components/schemas/TranslatedId"
    ConditionNode:
      x-stoplight:
        id: kv2rib65himdt
      x-examples: {}
      oneOf:
        - $ref: "#/components/schemas/ConditionRelation"
        - $ref: "#/components/schemas/ConditionLeaf"
      title: ConditionNode
    ConditionLeaf:
      type: object
      x-stoplight:
        id: qpb8of1ljcb4y
      x-examples: {}
      properties:
        is_operand:
          type: boolean
          default: true
          description: always "true" for the leaf of a tree
        condition:
          $ref: "#/components/schemas/Condition"
    ConditionRelation:
      type: object
      x-stoplight:
        id: 1ubaw97npzw7b
      x-examples: {}
      properties:
        is_operand:
          type: boolean
          default: false
          description: always "false" for relations
        relation:
          type: string
          description: '"and", "or"'
          example: and
          default: and
        children:
          type: array
          minItems: 0
          items:
            x-stoplight:
              id: i3dqn2ib2hjfl
            nullable: true
            allOf:
              - $ref: "#/components/schemas/ConditionNode"
      title: ConditionRelation
      description: ""
    Equipment:
      type: object
      x-examples: {}
      x-stoplight:
        id: wl02ch9nip85b
      properties:
        ankama_id:
          type: integer
        name:
          type: string
        description:
          type: string
        type:
          $ref: "#/components/schemas/TranslatedId"
        is_weapon:
          type: boolean
        level:
          type: integer
        pods:
          type: integer
        image_urls:
          $ref: "#/components/schemas/Images"
        effects:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Effect"
        conditions:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/ConditionNode"
        recipe:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Recipe"
        parent_set:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/TranslatedId"
    Weapon:
      type: object
      x-examples: {}
      x-stoplight:
        id: 904f1afmcifdp
      properties:
        ankama_id:
          type: integer
        name:
          type: string
        description:
          type: string
        type:
          $ref: "#/components/schemas/TranslatedId"
        is_weapon:
          type: boolean
          description: always true when the item is a weapon. Many fields are now available. Always check for this flag first when getting single equipment items.
        level:
          type: integer
        pods:
          type: integer
        image_urls:
          $ref: "#/components/schemas/Images"
        effects:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Effect"
        conditions:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/ConditionNode"
        critical_hit_probability:
          type: integer
        critical_hit_bonus:
          type: integer
        max_cast_per_turn:
          type: integer
        ap_cost:
          type: integer
        range:
          $ref: "#/components/schemas/Range"
        recipe:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Recipe"
        parent_set:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/TranslatedId"
    ItemSubtype:
      title: ItemSubtype
      x-stoplight:
        id: vhpfmq2ovxmfg
      type: object
      properties:
        ankama_id:
          type: integer
          x-stoplight:
            id: n5cqko2t6q5kx
        name_id:
          type: string
          x-stoplight:
            id: 914m1fu53jptk
          description: unique
    EquipmentSetEffects:
      title: SetEffects
      x-stoplight:
        id: kdx5a0h3kp09h
      type: object
      additionalProperties:
        x-stoplight:
          id: 9zr0rwo061q8o
        type: array
        minItems: 0
        items:
          $ref: "#/components/schemas/Effect"
          nullable: true
    TranslatedId:
      title: TranslatedId
      type: object
      properties:
        id:
          type: integer
          x-stoplight:
            id: t60hbquleeyuy
          description: unique
        name:
          type: string
          x-stoplight:
            id: isofaco3r3x4i
          description: localized name
    MountFamily:
      title: MountFamily
      x-stoplight:
        id: 7v7yek19r0zo5
      type: object
      properties:
        ankama_id:
          type: integer
          x-stoplight:
            id: ck57mmuv0bl4q
        name:
          type: string
          description: localized name
    Error:
      title: Error
      x-stoplight:
        id: 5skvt5sqsw5ic
      type: object
      properties:
        status:
          type: integer
          x-stoplight:
            id: 2m13q0eljxvuk
          description: HTTP status code
        error:
          type: string
          x-stoplight:
            id: f05elfa5kv7m6
          description: HTTP status as text
        code:
          type: string
          x-stoplight:
            id: f29krod4og7ez
          description: API specific error identifier for switch-case handling
        message:
          type: string
          x-stoplight:
            id: jqri60r7fsgmj
          description: "General, human-friendly error description"
        details:
          type: string
          x-stoplight:
            id: 32jtq681vde1v
          description: "Detailed, human-friendly problem description adopting specific inputs of the request"
    Almanax:
      type: object
      x-examples: {}
      x-stoplight:
        id: vrmvy5zbqek3g
      properties:
        bonus:
          type: object
          properties:
            description:
              type: string
            type:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
        date:
          type: string
        tribute:
          type: object
          properties:
            item:
              type: object
              properties:
                ankama_id:
                  type: integer
                image_urls:
                  $ref: "#/components/schemas/Images"
                name:
                  type: string
                subtype:
                  type: string
            quantity:
              type: integer
        reward_kamas:
          type: integer
          x-stoplight:
            id: oneb4usnoodzz
          description: Amount of Kamas you get as reward for finishing this Almanax quest.
          nullable: true
      title: Almanax
    CreateTwitterWebhook:
      type: object
      x-examples:
        Example:
          whitelist: null
          blacklist: null
          subscriptions:
            - DOFUSfr
          format: discord
          preview_length: 280
          callback: "https://discord.com/api/webhooks/XYZ"
      title: CreateTwitterWebhook
      description: ""
      properties:
        whitelist:
          type: array
          nullable: true
          items:
            type: string
        blacklist:
          type: array
          nullable: true
          items:
            type: string
        subscriptions:
          type: array
          description: Get the available subscriptions with /meta/webhooks/twitter
          uniqueItems: true
          minItems: 1
          items:
            type: string
        format:
          type: string
          enum:
            - discord
        preview_length:
          type: integer
          example: 280
          format: int32
          minimum: 0
          maximum: 280
          nullable: true
        callback:
          type: string
          description: Discord Webhook URL
          format: uri
          example: "https://discord.com/api/webhooks/XYZ"
      required:
        - subscriptions
        - format
        - callback
      x-stoplight:
        id: 7k5ozheexjnxv
    CreateRSSWebhook:
      type: object
      x-examples:
        Example:
          whitelist:
            - retro
          blacklist: null
          subscriptions:
            - dofus3-en-official-news
          format: discord
          preview_length: 2000
          callback: "https://discord.com/api/webhooks/XYZ"
      title: CreateRSSWebhook
      description: ""
      properties:
        whitelist:
          type: array
          nullable: true
          items:
            type: string
        blacklist:
          type: array
          nullable: true
          items:
            type: string
        subscriptions:
          type: array
          description: Get the available subscriptions with /meta/webhooks/rss
          uniqueItems: true
          minItems: 1
          items:
            type: string
        format:
          type: string
          enum:
            - discord
        preview_length:
          type: integer
          example: 2000
          format: int32
          minimum: 0
          maximum: 4000
          nullable: true
        callback:
          type: string
          description: Discord Webhook URL
          format: uri
          example: "https://discord.com/api/webhooks/XYZ"
      required:
        - subscriptions
        - format
        - callback
      x-stoplight:
        id: j8vhvwqn3jeoe
    PutRSSWebhook:
      type: object
      x-examples:
        Example:
          whitelist: null
          blacklist: null
          subscriptions: null
          preview_length: 60
      title: PutRSSWebhook
      description: ""
      properties:
        whitelist:
          type: array
          nullable: true
          items:
            type: string
        blacklist:
          type: array
          nullable: true
          items:
            type: string
        subscriptions:
          type: array
          description: Get the available subscriptions with /meta/webhooks/rss
          uniqueItems: true
          nullable: true
          items:
            type: string
        preview_length:
          type: integer
          example: 2000
          format: int32
          minimum: 0
          maximum: 4000
          nullable: true
      x-stoplight:
        id: 7uavm6v1r9v4y
    PutTwitterWebhook:
      type: object
      x-examples:
        Example:
          whitelist:
            - retro
          blacklist: null
          subscriptions:
            - dofus3-en-official-changelog
          preview_length: null
      title: PutTwitterWebhook
      description: ""
      properties:
        whitelist:
          type: array
          nullable: true
          items:
            type: string
        blacklist:
          type: array
          nullable: true
          items:
            type: string
        subscriptions:
          type: array
          description: Get the available subscriptions with /meta/webhooks/twitter
          uniqueItems: true
          nullable: true
          items:
            type: string
        preview_length:
          type: integer
          example: 280
          format: int32
          minimum: 0
          maximum: 280
          nullable: true
      x-stoplight:
        id: omtuayunn9wfk
    CreateAlmanaxWebhook:
      type: object
      x-examples:
        Example:
          bonus_whitelist: null
          bonus_blacklist: null
          subscriptions:
            - dofus3_fr
          format: discord
          callback: "https://discord.com/api/webhooks/XYZ"
          daily_settings:
            timezone: Europe/Paris
            midnight_offset: 0
          iso_date: false
          mentions:
            kolossium-experience:
              - discord_id: 1234
                is_role: true
                ping_days_before: null
          intervals:
            - daily
          weekly_weekday: sunday
      title: CreateAlmanaxWebhook
      properties:
        bonus_whitelist:
          type: array
          description: "from all available bonuses (ids) from /dofus3/meta/{language}/almanax/bonuses"
          nullable: true
          items:
            type: string
        bonus_blacklist:
          type: array
          description: "from all available bonuses (ids) from /dofus3/meta/{language}/almanax/bonuses"
          nullable: true
          items:
            type: string
        subscriptions:
          type: array
          description: Get the available subscriptions with /meta/webhooks/almanax
          items:
            type: string
        format:
          type: string
          enum:
            - discord
        callback:
          type: string
          description: Discord Webhook URL
          example: "https://discord.com/api/webhooks/XYZ"
          format: uri
        daily_settings:
          type: object
          nullable: true
          properties:
            timezone:
              type: string
              default: Europe/Paris
              example: Europe/Paris
              description: Timezone of your community to determine midnight.
              nullable: true
            midnight_offset:
              type: integer
              minimum: 0
              maximum: 23
              default: 0
              example: 0
              description: "Hours added to midnight at the selected timezone. 8 = 8:00 in the morning."
              nullable: true
        iso_date:
          type: boolean
          default: false
          description: "If false, it will use common local time formats and weekday translations. If true, the format is YYYY-MM-DD."
          nullable: true
        mentions:
          type: object
          description: Almanax bonus ids mapped to array of mentions.
          example:
            kolossium-experience:
              - discord_id: 1234
                is_role: true
                ping_days_before: null
          additionalProperties:
            type: array
            items:
              type: object
              description: Mention
              properties:
                discord_id:
                  description: User or role ID directly from Discord. Activate developer mode and right click a user or role to get them.
                  example: 1234
                  type: integer
                is_role:
                  description: Whether an ID describes a role (true) or user (false). This is needed for formatting the mention command so Discord understands it.
                  example: true
                  type: boolean
                ping_days_before:
                  description: Get a mention days before the bonus comes up. It will post on the specified time. Also works when the interval is not daily.
                  type: integer
                  example: 1
                  minimum: 1
                  maximum: 31
                  nullable: true
          nullable: true
        intervals:
          type: array
          uniqueItems: true
          example:
            - daily
          description: |-
            - Daily posts each day, filtering with Black/Whitelist and mentions are applied daily.
            - Weekly posts the next 7 days (excluding the posting day) once per week at the specified time. With only weekly selected, of all mentions, only prior notices will come through daily. The 7 day preview gets filtered by the Black/Whitelist.
            - Monthly posts a preview of the next month from first to last date. The post will be on the last day of a month (ignoring day of the week) at the specified time. Mentions and filtering works like weekly.
            The biggest difference between daily and the other two is that daily always posts the current day while monthly and weekly only show future days. You can always combine the intervals by selecting multiple intervals for one hook or create multiple hooks for the same channel with different settings to get every highly specific combination you want.
          items:
            type: string
            enum:
              - daily
              - weekly
              - monthly
        weekly_weekday:
          type: string
          enum:
            - sunday
            - monday
            - tuesday
            - wednesday
            - thursday
            - friday
            - saturday
          example: sunday
          description: When to post the weekly preview at the specified time.
          nullable: true
      required:
        - subscriptions
        - format
        - callback
        - intervals
      x-stoplight:
        id: pyyh22g8b7mk0
    PutAlmanaxWebhook:
      type: object
      x-examples:
        Example:
          bonus_whitelist: []
          bonus_blacklist: null
          subscriptions: null
          daily_settings:
            timezone: Europe/Paris
            midnight_offset: 0
          iso_date: false
          mentions:
            kolossium-experience:
              - discord_id: 1234
                is_role: true
                ping_days_before: null
          intervals:
            - daily
          weekly_weekday: sunday
      title: PutAlmanaxWebhook
      properties:
        bonus_whitelist:
          type: array
          description: |-
            from all available bonuses (ids) from /dofus3/meta/{language}/almanax/bonuses.
            Delete old entries with empty array []. Just null changes nothing.
          nullable: true
          items:
            type: string
        bonus_blacklist:
          type: array
          description: "from all available bonuses (ids) from /dofus3/meta/{language}/almanax/bonuses. Delete old entries with empty array []. Just null changes nothing."
          nullable: true
          items:
            type: string
        subscriptions:
          type: array
          description: Get the available subscriptions with /meta/webhooks/almanax
          nullable: true
          items:
            type: string
        daily_settings:
          type: object
          nullable: true
          properties:
            timezone:
              type: string
              default: Europe/Paris
              example: Europe/Paris
              description: Timezone of your community to determine midnight.
              nullable: true
            midnight_offset:
              type: integer
              minimum: 0
              maximum: 23
              default: 0
              example: 0
              description: "Hours added to midnight at the selected timezone. 8 = 8:00 in the morning."
              nullable: true
        iso_date:
          type: boolean
          default: false
          description: "If false, it will use common local time formats and weekday translations. If true, the format is YYYY-MM-DD."
          nullable: true
        mentions:
          type: object
          description: Almanax bonus ids mapped to array of mentions.
          example:
            kolossium-experience:
              - discord_id: 1234
                is_role: true
                ping_days_before: null
          additionalProperties:
            type: array
            items:
              type: object
              description: Mention
              properties:
                discord_id:
                  description: User or role ID directly from Discord. Activate developer mode and right click a user or role to get them.
                  example: 1234
                  type: integer
                is_role:
                  description: Whether an ID describes a role (true) or user (false). This is needed for formatting the mention command so Discord understands it.
                  example: true
                  type: boolean
                ping_days_before:
                  description: Get a mention days before the bonus comes up. It will post on the specified time. Also works when the interval is not daily.
                  type: integer
                  example: 1
                  minimum: 1
                  maximum: 31
                  nullable: true
        intervals:
          type: array
          uniqueItems: true
          example:
            - daily
          nullable: true
          items:
            type: string
            enum:
              - daily
              - weekly
              - monthly
        weekly_weekday:
          type: string
          enum:
            - sunday
            - monday
            - tuesday
            - wednesday
            - thursday
            - friday
            - saturday
          example: sunday
          description: When to post the weekly preview at the specified time.
          nullable: true
      x-stoplight:
        id: htkpa9vrybcye
    RssWebhook:
      type: object
      x-examples:
        Example:
          id: string
          whitelist: null
          blacklist: null
          subscriptions:
            - dofus3-fr-official-news
          format: discord
          preview_length: 150
          created_at: "2022-10-25T15:32:37.406281+02:00"
          last_fired_at: "2022-10-25T15:35:37.103240+02:00"
          updated_at: "2022-10-25T15:32:37.406281+02:00"
      properties:
        id:
          type: string
        whitelist:
          type: array
          nullable: true
          items:
            type: string
        blacklist:
          type: array
          nullable: true
          items:
            type: string
        subscriptions:
          type: array
          items:
            type: string
        format:
          type: string
          enum:
            - discord
        preview_length:
          type: integer
          example: 2000
          format: int32
          minimum: 0
          maximum: 4000
        created_at:
          type: string
          example: "2022-10-25T15:32:37.406281+02:00"
          format: date-time
        last_fired_at:
          type: string
          format: date-time
          example: "2022-10-25T15:35:37.103240+02:00"
          nullable: true
        updated_at:
          type: string
          format: date-time
          example: "2022-10-25T15:32:37.406281+02:00"
      title: RSSWebhook
      x-stoplight:
        id: e4x9508e2otmo
    TwitterWebhook:
      type: object
      x-examples:
        Example:
          id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          whitelist:
            - unity
          blacklist:
            - retro
          subscriptions:
            - DOFUS_EN
          format: discord
          preview_length: 280
          created_at: "2022-10-25T15:32:37.406281+02:00"
          last_fired_at: "2022-10-25T15:35:37.103240+02:00"
          updated_at: "2022-10-25T15:32:37.406281+02:00"
      title: TwitterWebhook
      properties:
        id:
          type: string
          format: uuid
        whitelist:
          type: array
          nullable: true
          items:
            type: string
        blacklist:
          type: array
          nullable: true
          items:
            type: string
        subscriptions:
          type: array
          items:
            type: string
        format:
          type: string
          enum:
            - discord
        preview_length:
          type: integer
          example: 280
          format: int32
          minimum: 0
          maximum: 280
        created_at:
          type: string
          example: "2022-10-25T15:32:37.406281+02:00"
          format: date-time
        last_fired_at:
          type: string
          format: date-time
          example: "2022-10-25T15:35:37.103240+02:00"
          nullable: true
        updated_at:
          type: string
          format: date-time
          example: "2022-10-25T15:32:37.406281+02:00"
      x-stoplight:
        id: n7ja34vr6bc0v
    AlmanaxWebhook:
      type: object
      x-examples:
        Example:
          id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          daily_settings:
            timezone: Europe/Paris
            midnight_offset: 0
          bonus_whitelist:
            - plenty-to-harvest
          bonus_blacklist: null
          subscriptions:
            - dofus3_en
          iso_date: false
          mentions:
            kolossium-experience:
              - discord_id: 1234
                is_role: true
                ping_days_before: null
          intervals:
            - daily
          weekly_weekday: sunday
          created_at: "2019-08-24T14:15:22Z"
          last_fired_at: "2019-08-24T14:15:22Z"
          updated_at: "2019-08-24T14:15:22Z"
      title: AlmanaxWebhook
      description: ""
      properties:
        id:
          type: string
          format: uuid
        daily_settings:
          type: object
          properties:
            timezone:
              type: string
              default: Europe/Paris
              example: Europe/Paris
              description: Timezone of your community to determine midnight.
            midnight_offset:
              type: integer
              default: 0
              example: 0
              description: "Hours added to midnight at the selected timezone. 8 = 8:00 in the morning."
        bonus_whitelist:
          type: array
          description: |-
            Only post when these bonuses come up.
            From all available bonuses (ids) from /dofus3/meta/{language}/almanax/bonuses.
          nullable: true
          items:
            type: string
        bonus_blacklist:
          type: array
          description: |-
            Skip the day when these bonuses come up.
            From all available bonuses (ids) from /dofus3/meta/{language}/almanax/bonuses
          nullable: true
          items:
            type: string
        subscriptions:
          type: array
          description: Get the available subscriptions with /meta/webhooks/almanax
          items:
            type: string
        iso_date:
          type: boolean
          default: false
          description: "If false, it will use common local time formats and weekday translations. If true, the format is YYYY-MM-DD."
        mentions:
          type: object
          description: Almanax bonus ids mapped to array of mentions.
          example:
            kolossium-experience:
              - discord_id: 1234
                is_role: true
                ping_days_before: null
          additionalProperties:
            type: array
            items:
              type: object
              description: Mention
              properties:
                discord_id:
                  description: User or role ID directly from Discord. Activate developer mode and right click a user or role to get them.
                  example: 1234
                  type: integer
                is_role:
                  description: Whether an ID describes a role (true) or user (false). This is needed for formatting the mention command so Discord understands it.
                  example: true
                  type: boolean
                ping_days_before:
                  description: Get a mention days before the bonus comes up. It will post on the specified time. Also works when the interval is not daily.
                  type: integer
                  example: 1
                  minimum: 1
                  maximum: 31
                  nullable: true
          nullable: true
        intervals:
          type: array
          uniqueItems: true
          example:
            - daily
          description: |-
            - Daily posts each day, filtering with Black/Whitelist and mentions are applied daily.
            - Weekly posts the next 7 days (excluding the posting day) once per week at the specified time. With only weekly selected, of all mentions, only prior notices will come through daily. The 7 day preview gets filtered by the Black/Whitelist.
            - Monthly posts a preview of the next month from first to last date. The post will be on the last day of a month (ignoring day of the week) at the specified time. Mentions and filtering works like weekly.
            The biggest difference between daily and the other two is that daily always posts the current day while monthly and weekly only show future days. You can always combine the intervals by selecting multiple intervals for one hook or create multiple hooks for the same channel with different settings to get every highly specific combination you want.
          items:
            type: string
            enum:
              - daily
              - weekly
              - monthly
        weekly_weekday:
          type: string
          enum:
            - sunday
            - monday
            - tuesday
            - wednesday
            - thursday
            - friday
            - saturday
          example: sunday
          description: When to post the weekly preview at the specified time.
          nullable: true
        created_at:
          type: string
          format: date-time
        last_fired_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
      x-stoplight:
        id: x3oc9iaxf57wv
    Range:
      title: Range
      x-stoplight:
        id: kan42tn0dy7yf
      type: object
      properties:
        min:
          type: integer
          x-stoplight:
            id: 0gn8zckrxbbr4
        max:
          type: integer
          x-stoplight:
            id: ujqak9zy7cxer
    GameSearch:
      title: GameSearch
      x-stoplight:
        id: u8xaaojb27p5j
      type: object
      properties:
        ankama_id:
          type: integer
          x-stoplight:
            id: qoe7ecpftg215
        name:
          type: string
          x-stoplight:
            id: 8476cadtxa064
        type:
          $ref: "#/components/schemas/GameSearchType"
        item_fields:
          $ref: "#/components/schemas/GameSearchItem"
          nullable: true
    GameSearchType:
      title: GameSearchType
      x-stoplight:
        id: ix89xa48iwyu1
      type: object
      properties:
        name_id:
          type: string
          x-stoplight:
            id: bc62jam7sk3ta
    GameSearchItem:
      title: GameSearchItem
      x-stoplight:
        id: w969rujdj0538
      type: object
      properties:
        type:
          $ref: "#/components/schemas/GameSearchType"
          nullable: true
        level:
          type: integer
          x-stoplight:
            id: e80w3jwdolhm5
          nullable: true
        image_urls:
          $ref: "#/components/schemas/Images"
          nullable: true
    Version:
      type: object
      properties:
        version:
          type: string
        release:
          type: string
        update_stamp:
          type: string
      x-examples:
        Beta Release:
          version: 3.0.5.9
          release: beta
          update_stamp: "2024-11-28T22:25:42.062971457+01:00"
      title: Version
  securitySchemes: {}
tags:
  - name: almanax
    description: The Dofus Almanax
  - name: consumables
    description: Consumable Items
  - name: cosmetics
    description: Cosmetic Equipment
  - name: equipment
    description: Weapons and Equipment
  - name: game
    description: General Overview Endpoints
  - name: meta
    description: Metadata for using the API more efficiently
  - name: mounts
    description: Mounts
  - name: quest items
    description: Quest Items
  - name: resources
    description: Resources
  - name: sets
    description: Sets
  - name: webhooks
    description: Actively calling you for updates for various events
